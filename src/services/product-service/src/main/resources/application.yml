server:
  port: 5003



logging:
  level:
    io.github.resilience4j.ratelimiter: DEBUG
    io.github.resilience4j: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId},%X{spanId}] %-5level %logger{36} - %msg%n"

spring:
  application:
    name: product-service
  boot:
    admin:
      client:
        url: http://localhost:5050
        instance:
          service-url: http://localhost:5003
        username: admin
        password: P@ssword1
  cloud:
    stream:
      function:
        autodetect: true
      bindings:
        # Consumer
        submitOrder-in-0:
          destination: submitOrder
          content-type: application/json
        orderStockRejected-out-0:
          destination: orderStockRejected
          content-type: application/json
        orderStockConfirmed-out-0:
          destination: orderStockConfirmed
          content-type: application/json
      kafka:
        binder:
          auto-create-topics: true
          brokers: localhost:29092

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true


management:
  tracing:
    sampling:
      probability: 1.0  # Tüm request’leri trace et
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
      health:
        show-details: ALWAYS


resilience4j:
  circuitbreaker:
    instances:
      orderService:
        registerHealthIndicator: true # Actuator üzerinden circuit breaker durumu izlenebilir
        slidingWindowSize: 5          # Son 5 çağrı değerlendirilir
        minimumNumberOfCalls: 3       # Circuit breaker karar vermeden önce en az 3 çağrı olmalı
        failureRateThreshold: 50      # %50 başarısızlık oranına ulaşılırsa devre kesilir (open state)
        waitDurationInOpenState: 5s    # Open state'te kaldıktan sonra 5 saniye bekleyip tekrar deneme yapılır
  retry:
    instances:
      orderService:
        max-attempts: 3 # Maksimum deneme sayısı (ilk istek + 2 retry = toplam 3)
        wait-duration: 1s # Her deneme arasında 1 saniye bekle

  ratelimiter:
    instances:
      orderService:
        limit-for-period: 5   # 100s 5 adet çağrı limiti
        limit-refresh-period: 100s
        timeout-duration: 0s

  bulkhead:
    instances:
      orderService:
        max-concurrent-calls: 3  # Aynı anda en fazla 3 thread bu servise çağrı yapabilir
        max-wait-duration: 0s     # Eğer thread havuzu doluysa, beklemeden hata ver (0 ms bekle)

  timelimiter:
    instances:
      orderService:
        timeout-duration: 2s       # Metot 2 saniye içinde tamamlanmazsa iptal edilir.
        cancelRunningFuture: true # süre aşımı olursa arka plandaki işlemleri de durdur


